;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : swimming
;;
;; mem0 et mem1 : coordonnees d'une cible
;; mem2 : espace de la cible

;; mem4 : indique si un harvester est en mode retour à la base
;; mem5 : indique si le robot a ou non une cible sélectionnée

;; mem6 : le nb de harvesters à créer
;; mem7 : le nb de rocket-launchers à créer
;; mem8 : le nb d'explorers à créer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to swimming-ask-for-energy [ b n ]
  ask b [ if (energy > 2500) [ give-energy myself n ]]
end

to swimming-go-back-to-base
  let b min-one-of my-bases [ distance myself ]
  if (b != nobody ) [
    if ((breed = Harvesters) and (distance b > 12) and (distance b < 13)) [drop-wall]

    ifelse (distance b <= 2)
      [
        give-food b carrying-food? 

        if ((Breed = Explorers) and (energy < 500)) [ swimming-ask-for-energy b 800 ]
        if ((Breed = RocketLaunchers) and (energy < 800)) [ swimming-ask-for-energy b 1200 ]
        if ((Breed = Harvesters) and (energy < 400)) [ swimming-ask-for-energy b 800 ]

        if ((Breed = RocketLaunchers) and (nb-missiles < 3)) [
            swimming-ask-for-energy b 500
            new-missile 50
        ]
      set mem4 0
      ;; fait demi-tour
      rt 180
      ]

      ; sinon
      [
        set heading towards b - 20 + random 40

        ifelse (free-ahead? speed = nobody)  [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]  
end

to swimming-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to swimming-harvesters-go-and-eat
  let w min-one-of (perceive-walls) [ distance myself ]
  let b min-one-of my-bases [ distance myself ]
  if ((w != nobody) and ((distance b < 12) or (distance b > 13))) [ take-wall w ]
  let f min-one-of perceive-food [ distance myself ]
  ifelse (f != nobody) [ 
    ifelse (distance f) <= 2
      [ take-food f ]
      [ set heading towards f 
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? speed = nobody) [ forward-move speed ]]
      ]
  ]
  [
    ifelse (mem5 = 1)
    [ 
      ifelse (distancexy mem0 mem1 > 2)
      [
        set heading towardsxy mem0 mem1
        ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? speed = nobody) [ forward-move speed ]]
      ]
      [ set mem5 0 ]
    ]
    [ random-move ]
  ]
end

to-report swimming-no-target?
  report mem5 = 0
end

to swimming-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to swimming-set-target-t [ t espece ]
  set mem0 t set mem2 espece set mem5 2
end

to swimming-set-food-target [ x y ]
  if (swimming-no-target?) [ set mem0 x set mem1 y set mem5 1 ] 
end

to swimming-call-rocket-launcher-xy [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ swimming-set-target x y espece ]]
end

to swimming-call-rocket-launcher-t [ t espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distance t ]
  if (rl != nobody) [ ask rl [ swimming-set-target-t t espece ]]
end

to swimming-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to swimming-call-harvester [ x y ]
  let h min-one-of perceive-specific-robots color harvesters [ distancexy x y ]
  if (h != nobody) [ ask h [ swimming-set-food-target x y ]]
end

to swimming-select-target
  if (swimming-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to swimming-shoot 
  if (not swimming-no-target?) 
  [
    ifelse (mem5 = 1)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0 ]
    [ launch-faf mem0 set mem5 0 ]
  ]

end

to swimming-drive-harvesters
  let food one-of perceive-food
  if (food != nobody) [
    swimming-call-harvester [xcor] of food [ycor] of food 
  ]
end

to swimming-drive-base-shooter
  let b min-one-of perceive-base ennemy [ distance myself ]
  if (b != nobody) [
    swimming-call-rocket-launcher-t b Bases
  ]
end

to swimming-drive-harvester-shooter
  let b min-one-of perceive-specific-robots ennemy Harvesters [ distance myself ]
  if (b != nobody ) [
    swimming-call-rocket-launcher-xy [xcor] of b [ycor] of b Harvesters
  ]
end

to goRedExplorer
  ifelse (carrying-food? > 500) or (energy < 500)
  [ swimming-go-back-to-base ]
  [ swimming-go-and-eat ]

  swimming-drive-harvesters
  swimming-drive-base-shooter
  swimming-drive-harvester-shooter

  ifelse (not swimming-no-target?) [
    swimming-call-rocket-launcher-xy mem0 mem1 mem2
  ]
  [ let h one-of perceive-robots ennemy
    if ( h != nobody ) [ swimming-call-rocket-launcher-t h [breed] of h]
  ]
end

to goRedRocketLauncher
  if(not swimming-no-target?) [ swimming-shoot ]
  
  ifelse (carrying-food? > 500) or (energy < 800) or (nb-missiles = 0)
  [ swimming-go-back-to-base ]
  [ 
    swimming-select-target
    ifelse (swimming-no-target?) 
    [ swimming-go-and-eat ]
    [ swimming-shoot ]
  ]

  if ((energy > 1200) and (nb-missiles < 5)) [ new-missile 10 ]
  if ((energy > 1200) and (nb-fafs < 3)) [ new-faf 5 ]
end

to goRedHarvester
  let f min-one-of perceive-food [ distance myself ]
  while [(f != nobody) and (distance f <= 2)] [
    take-food f
    set f min-one-of perceive-food [ distance myself ]
  ]

  let ex min-one-of  perceive-specific-robots friend Explorers  [distance myself]
  if (ex != nobody) [ give-food ex carrying-food? ]
  
  let h_ad min-one-of perceive-specific-robots ennemy Harvesters [distance myself]
  if (h_ad != nobody) [ swimming-call-rocket-launcher-t h_ad [breed] of h_ad]

  ifelse (mem4 = 1) or (carrying-food? > 500) or (energy < 400)
  [
    ; retour à la base
    set mem4 1
    ;; rentre à la base si certaines conditions sont vérifiées
    swimming-go-back-to-base
    if (energy > 100) and (carrying-food? > 100) [ 
      ;; détermine la distance de la base la plus proche
      let b min-one-of my-bases [ distance myself ]
      if (b != nobody) [
        ;; si le robot est à moins de 10 de la base
        if (distance b < 12)
          [ plant-seeds color max-seeds ]
      ]
    ]
  ]
  [
    ;; cherche à manger
    swimming-harvesters-go-and-eat
  ]
end

to goRedBase
  ifelse (mem6 > 0) [ new-Harvester self set mem6 mem6 - 1 ]
  [ ifelse (mem7 > 0) [ new-RocketLauncher self set mem7 mem7 - 1 ]
  [ if (mem8 > 0) [ new-Explorer self set mem8 mem8 - 1 ]]]

  if (nb-missiles < 10) and (energy > 1000) [ new-missile 30 ]
  if (nb-fafs < 10) and (energy > 1000) [ new-faf 10 ]
  if (energy > 10000) [ ifelse (random 2 = 0) [ set mem6 mem6 + 1 ][ifelse (random 3 = 0) [ set mem8 mem8 + 1 ][ set mem7 mem7 + 1 ]]]

  let t one-of perceive-robots ennemy
  if (t != nobody) [
    ;; regarde s'il y a des robots amis en direction de la cible potentielle t avant de tirer
    if (not any? perceive-robots-in-cone color towards t) [ launch-faf t ]
  ]
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
end

;; procedure pour initialiser les bases rouges
to initRedBase
  new-Harvester self
  set mem6 20 
  set mem7 4
  set mem8 4
end